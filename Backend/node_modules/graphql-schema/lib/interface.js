'use strict';

exports.__esModule = true;
var _bind = Function.prototype.bind;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = interfaceType;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _baseObject = require('./baseObject');

var _baseObject2 = _interopRequireDefault(_baseObject);

var _graphql = require('graphql');

var Interface = (function (_BaseObject) {
  function Interface() {
    _classCallCheck(this, Interface);

    _BaseObject.apply(this, arguments);
  }

  _inherits(Interface, _BaseObject);

  Interface.prototype.resolve = function resolve(_resolve) {
    this.resolveType = _resolve;
    return this;
  };

  Interface.prototype.end = function end() {
    var resolveType = this.resolveType;

    return new _graphql.GraphQLInterfaceType(_extends({}, _BaseObject.prototype.end.call(this), {
      resolveType: resolveType
    }));
  };

  return Interface;
})(_baseObject2['default']);

function interfaceType() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new (_bind.apply(Interface, [null].concat(args)))();
}

module.exports = exports['default'];
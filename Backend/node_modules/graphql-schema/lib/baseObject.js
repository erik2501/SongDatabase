'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function resolveFields(fields) {
  var fieldNames = Object.keys(fields);
  var fieldDefs = {};

  for (var _iterator = fieldNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var fieldName = _ref;

    var field = fields[fieldName];
    var type = field.type;

    fieldDefs[fieldName] = _extends({}, field, {
      args: resolveFields(field.args || {}),
      type: typeof type === 'function' ? type() : type
    });
  }

  return fieldDefs;
}

var BaseObject = (function () {
  function BaseObject(name, interfaces, description) {
    _classCallCheck(this, BaseObject);

    if (!description) {
      /* eslint-disable no-param-reassign */
      description = interfaces;
      interfaces = undefined;
      /* eslint-enable no-param-reassign */
    }

    this.name = name;
    this.description = description;
    this.interfaces = interfaces;

    this.__field = null;
    this.fields = {};
  }

  BaseObject.prototype.__saveField = function __saveField() {
    if (this.__field) {
      this.fields[this.__field.name] = this.__field;
      this.__field = null;
    }
  };

  BaseObject.prototype.field = function field(name, type, description, resolve) {
    if (typeof description === 'function') {
      /* eslint-disable no-param-reassign */
      resolve = description;
      description = null;
      /* eslint-enable no-param-reassign */
    }

    _invariant2['default'](!this.fields[name], 'field(...): \'' + name + '\' is already defined');

    _invariant2['default'](type, 'field(...): \'' + name + '\' has an undefined or null type. If you ' + ('are trying to refer to \'' + this.name + '\' then you should use a function'));

    this.__saveField();

    this.__field = {
      name: name,
      type: type,
      description: description,
      resolve: resolve,
      args: {}
    };

    return this;
  };

  BaseObject.prototype.arg = function arg(name, type, defaultValue, description) {
    if (!description) {
      /* eslint-disable no-param-reassign */
      description = defaultValue;
      defaultValue = undefined;
      /* eslint-enable no-param-reassign */
    }

    _invariant2['default'](this.__field, 'arg(...): \'' + name + '\' must appear under a field');

    _invariant2['default'](!this.__field.args[name], 'arg(...): \'' + name + '\' is already defined by ' + this.__field.name);

    this.__field.args[name] = {
      name: name,
      type: type,
      description: description,
      defaultValue: defaultValue
    };

    return this;
  };

  BaseObject.prototype.deprecated = function deprecated(reason) {
    _invariant2['default'](this.__field, 'deprecated(...): Deprecations must appear under a field');

    this.__field.deprecationReason = reason;
    return this;
  };

  BaseObject.prototype.end = function end() {
    var _this = this;

    this.__saveField();

    var name = this.name;
    var description = this.description;

    return {
      name: name,
      description: description,
      fields: function fields() {
        return resolveFields(_this.fields);
      }
    };
  };

  return BaseObject;
})();

exports['default'] = BaseObject;
module.exports = exports['default'];
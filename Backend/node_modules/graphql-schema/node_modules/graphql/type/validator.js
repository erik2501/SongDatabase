
/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.validateSchema = validateSchema;

var _utilsInvariant = require('../utils/invariant');

var _utilsInvariant2 = _interopRequireDefault(_utilsInvariant);

var _schema = require('./schema');

var _allRules = require('./allRules');

/**
 * Checks an input type schema for conformance to the "Type System"
 * section of the spec, returning an array of errors describing any encountered
 * issues rendering the schema invalid.
 *
 * If the schema is valid, an empty array is returned.
 */

function validateSchema(schema, argRules) {
  (0, _utilsInvariant2['default'])(schema, 'Must provide schema');
  var context = new ValidationContext(schema);
  var errors = [];
  var rules = argRules || _allRules.allRules;

  for (var ii = 0; ii < rules.length; ++ii) {
    var newErrors = rules[ii](context);
    if (newErrors) {
      errors.push.apply(errors, newErrors);
    }
  }

  return errors;
}

var ValidationContext = (function () {
  function ValidationContext(schema) {
    _classCallCheck(this, ValidationContext);

    this._schema = schema;
  }

  _createClass(ValidationContext, [{
    key: 'getSchema',
    value: function getSchema() {
      return this._schema;
    }
  }]);

  return ValidationContext;
})();

exports.ValidationContext = ValidationContext;